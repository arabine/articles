<html>
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-16">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta name="generator" content="NeoEZ (C)2001 Romain Guy">
    <meta name="author" content="Erik LOUISE">
    <meta name="keywords" content=
    "IEEE 754, mantisse, exposant, signe, binaire, hexad&eacute;cimal, hexa, float, flottant, r&eacute;el, nombre">
    <meta name="description" content=
    "Comment convertir un hexad&eacute;cimal IEEE 754 31 bits en nombre r&eacute;el">

    <title>Norme IEEE 754 32 bits</title>
    <link title="Style" href="http://www.programmationworld.com/site/stylesheet.css" type="text/css" rel=
    "stylesheet">
  </head>

  <body bgcolor="#ffffff">
    <table class="main" width="99%">
      <tr>
        <td class="titleprincipal">Norme IEEE 754 32 bits<br>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        <br>
        <br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<u><b>Introduction</b></u><br>
            <br>
            L'IEEE 754 est aujourd'hui la repr&eacute;sentation la plus commune en terme de calculs en
            virgule flottante en informatique. La majeure partie des architectures et plateformes actuelles
            telles l'x86 ou macintosh en sont directement inspir&eacute;es. Cet article va vous donner un
            bref aper&ccedil;u de la mani&egrave;re dont se d&eacute;compose, dans un premier temps un HEXA
            IEEE754 32 bits en binaire, puis dans un second temps, comment interpr&eacute;ter la
            s&eacute;quence binaire obtenue en un nombre r&eacute;el.<br>
            <br>
            Cette norme a &eacute;t&eacute; &eacute;tablie par <a href=
            "http://www.cs.berkeley.edu/~wkahan/">William Kahan pour le compte de l'IEEE (Institute of
            Electrical and Electronics Engineers) en 1985.</a>
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td>
          <h4><u>Sommaire</u></h4>

          <div style="margin-left:1em">
            1. <a href="#_topic_1">Nombres &agrave; virgule flottante, kesako ?</a>
          </div>

          <div style="margin-left:1em">
            2. <a href="#_topic_2">Organisation d'un hexad&eacute;cimal 32 bits IEEE 754</a>
          </div>

          <div style="margin-left:1em">
            3. <a href="#_topic_3">Le signe</a>
          </div>

          <div style="margin-left:1em">
            4. <a href="#_topic_4">L'Exposant</a>
          </div>

          <div style="margin-left:1em">
            5. <a href="#_topic_5">La mantisse</a>
          </div>

          <div style="margin-left:1em">
            6. <a href="#_topic_6">Recomposition du nombre &amp; conclusion</a>
          </div>

          <div style="margin-left:1em">
            7. <a href="#_topic_7">Calculatrice en JavaScript</a>
          </div>

          <div style="margin-left:1em">
            8. <a href="#_topic_8">Bibliographie</a>
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_1"></a>Nombres &agrave; virgule flottante, kesako ?</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Il y a plusieurs mani&egrave;res de
            repr&eacute;senter des nombres r&eacute;els sur des ordinateurs. Une approche d'un nombre en
            r&eacute;el serait de recomposer ce dernier par le placement d'un point encercl&eacute; de deux
            integers, mais par d&eacute;finition, cette virgule-l&agrave; ne serait en aucun cas flottante,
            de plus cette m&eacute;thode pourrait nous amener &agrave; commettre de grosses erreurs par
            l'accumulation d'arrondis plus ou moins approximatifs. Finalement, la n&eacute;cessit&eacute;
            d'&eacute;tablir un format permettant l'utilisation d'une virgule r&eacute;ellement flottante se
            fit sentir, il fallut alors d&eacute;terminer ce dernier de la mani&egrave;re la plus simple
            &agrave; interpr&eacute;ter aussi bien en code machine (en binaire, le cas &eacute;ch&eacute;ant)
            qu'en r&eacute;el pour que nous pauvres hommes aux capacit&eacute;es calculatoires
            limit&eacute;es puissions comprendre la valeur &agrave; d&eacute;finir.<br>
            Dans cette optique-l&agrave;, un format se distingua plus que les autres, il s'agit du format
            Hexad&eacute;cimal qui permet une interpr&eacute;tation rapide dans les deux sens. Nous allons
            donc voir de quelle mani&egrave;re on peut retranscrire un code hexad&eacute;cimal sur 4 octets
            (32 bits) en r&eacute;el sans pour autant n&eacute;gliger la partie machine avec le code binaire
            ...
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_2"></a>Organisation d'un hexad&eacute;cimal 32 bits IEEE 754</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
            Tout au long de ce cours, nous allons prendre comme exemple la cha&icirc;ne hexa &amp;h42F6CCCD.
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center"><img src="images/hex2bin.gif"><br>
        <b><u>Conversion Hexa vers Binaire.</u></b></td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center">
          <table border="0" width="70%" cellborder="0" cellpadding="0" cellspacing="0">
            <tr>
              <td class="notetitle" width="32"><img src=
              "http://www.programmationworld.com/site/images/advice.gif"></td>

              <td class="notetitle" valign="middle">&nbsp;&nbsp;Astuce<br>
              </td>
            </tr>

            <tr>
              <td class="note" colspan="2">Pour convertir une base 16 (hexa) en base 2 (binaire) facilement,
              il existe une m&eacute;thode simple : un octet (8 bits) est compos&eacute; de deux
              caract&egrave;res en hexad&eacute;cimal, et de 8 caract&egrave;res en binaire. On
              num&eacute;rote les bits de droite &agrave; gauche, ainsi pour un caract&egrave;re ascii (de 0
              a F) repr&eacute;sentant un hexa, on interpr&egrave;te de la mani&egrave;re suivante : le
              premier repr&eacute;sentant une valeur de '1', le second une valeur de '2', le troisi&egrave;me
              une valeur de '4' et pour finir le quatri&egrave;me, une valeur de '8'.<br>
               Notez bien le rythme de succession des 1 et 0 dans le tableau suivant :</td>
            </tr>
          </table>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center"><img src="images/bits.gif"><br>
        <b><u>Tableau de conversion Hexad&eacute;cimal vers Binaire.</u></b></td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bon, maintenant que tout le monde sait
            d&eacute;composer le binaire r&eacute;sultant d'un hexad&eacute;cimal, attaquons les choses
            serieuses ;)
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_3"></a>Le signe</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L&agrave;, vu qu'il n'y a pas grand chose
            &agrave; dire, on va faire simple ;o)<br>
            <br>
             Le signe de notre nombre r&eacute;el s'obtient simplement par l'interpr&eacute;tation du tout
            premier bit (celui de gauche) de la cha&icirc;ne binaire obtenue, si le bit 31 est &eacute;gal a
            0 alors le signe est positif (+), si il est &eacute;gal a 1, alors le signe est n&eacute;gatif
            (-).
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_4"></a>L'Exposant</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;La s&eacute;rie de bits obtenue (1 octet) doit
            &ecirc;tre repr&eacute;sentative aussi bien d'un exposant positif que d'un exposant
            n&eacute;gatif. Ainsi pour pouvoir repr&eacute;senter une pleine &eacute;chelle, il est
            n&eacute;cessaire de traduire l'octet obtenu en entier puis d'y soustraire '127', ceci uniquement
            dans le cas d'un IEEE 754 32 bits dit 'single'.<br>
             dans notre exemple, la conversion s'effectue ainsi :
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center"><img src="images/exposant.gif"><br>
        <b><u>Calcul de l'esposant.</u></b></td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_5"></a>La mantisse</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C'est l&agrave; que les choses se compliquent un
            peu ;o)<br>
             Afin d'interpr&eacute;ter cette derni&egrave;re partie, vous devez 'normaliser' la mantisse,
            c'est-&agrave;-dire s&eacute;parer la partie enti&egrave;re de la partie r&eacute;elle, car elles
            ne s'interpr&egrave;tent pas de la m&ecirc;me facon.<br>
            Pour se faire, nous allons utiliser l'exposant<br>
            <br>
            <b><u>La partie enti&egrave;re de la mantisse</u></b><br>
            <br>
            La partie enti&egrave;re s'obtient par la d&eacute;composition de la mantisse sous forme binaire
            &agrave; l'aide de l'exposant, ainsi pour un exposant de '6', nous allons extraire les 6 premiers
            bits en partant de la gauche. Attention toutefois, la normalisation ne s'arr&ecirc;te pas
            l&agrave;, vous devez maintenant placer un '1' devant les 6 chiffres obtenus, puis rajouter le
            nombre de 0 n&eacute;cessaire devant pour obtenir un nombre de bits &eacute;gal selon le cas
            &agrave; 2, 4, 8, 12, 16, 20 ou 24.<br>
            la normalisation effectu&eacute;e, vous pouvez alors convertir le nombre binaire obtenu en un
            entier qui sera finalement la partie enti&egrave;re de votre r&eacute;el.
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center"><img src="images/mantisse1.gif"><br>
        <b><u>Partie enti&egrave;re de la mantisse.</u></b></td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
            <b><u>La partie r&eacute;elle de la mantisse</u></b><br>
            <br>
            La partie r&eacute;elle s'obtient par l'addition pure et dure du 'poids' des bits. La
            m&eacute;thode reste relativement simple dans le sens o&ugrave; l'on donne une valeur de 1/2 au
            premier bit, 1/4 au second, 1/8 au troisi&egrave;me, et ainsi de suite jusqu'&agrave; la fin de
            la cha&icirc;ne binaire et on additionne le tout. :)
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center"><img src="images/mantisse2.gif"><br>
        <b><u>Partie r&eacute;elle de la mantisse.</u></b></td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td align="center">
          <table border="0" width="70%" cellborder="0" cellpadding="0" cellspacing="0">
            <tr>
              <td class="notetitle" width="32"><img src=
              "http://www.programmationworld.com/site/images/rmq.gif"></td>

              <td class="notetitle" valign="middle">&nbsp;&nbsp;Remarque<br>
              </td>
            </tr>

            <tr>
              <td class="note" colspan="2">Dans le cadre de l'explication, nous avons d&eacute;compos&eacute;
              et traduit tous les digits de la mantisse, mais dans une application &agrave; but d'affichage
              ou de gain de temps, vous pouvez (et c'est fortement recommand&eacute;) ne conserver que les 5
              ou 6 premiers digits de la partie r&eacute;elle de la mantisse, les bits de poids fort se
              trouvant &agrave; l'extr&eacute;mit&eacute; gauche de la mantisse, leur importance diminue
              exponentiellement vers la droite.<br>
               Attention toutefois de ne pas tronquer la partie r&eacute;elle ! cela vous am&egrave;nerait de
              grosses erreurs d'interpr&eacute;tation et de calcul...</td>
            </tr>
          </table>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_6"></a>Recomposition du nombre &amp; conclusion</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Et voila, nous avons maintenant tous les
            &eacute;l&eacute;ments pour recomposer notre nombre &agrave; virgule flottante depuis un
            hexad&eacute;cimal, et nous obtenons bien <b><u>'+123.4'</u></b><br>
            <br>
            L'application de cette technique est tr&egrave;s couramment utilis&eacute;e dans les processeurs,
            et autres puces &eacute;lectroniques, pour ceux d'entre vous qui se sont souvent pos&eacute; la
            question de savoir comment un automate ou un ordinateur (diverses plateformes) est capable de
            convertir une valeur hexa en binaire ou en r&eacute;el, c'est simplement parce que la technique
            que nous venons d'aborder est support&eacute;e mat&eacute;riellement parlant, cela dit vous
            pourrez trouver sur le net de nombreuses ressources concernant ce domaine, notamment sur <a href=
            "http://www.ieee.org">le site officiel de IEEE</a>
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_7"></a>Calculatrice en JavaScript</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<script type="text/javascript">
function Convert2Bin(outstring, statstring, signBit, power, rounding)
{
  output = new String()
  var binexpnt, index1, index2, cnst, bias, lastbit, rounded, index3, binexpnt2
  var moreBits
  cnst = 2102
  bias = 1024
  for (index1 = 0; index1 < this.Size; index1++)  this.Result[index1] = 0     
  with (Math)           
  {
    this.Result[0] = signBit
    index1 = 0
    if (this.Size == 32) index2 = 9
    else index2 = 12
    if (rounding && (outstring == ""))
    {
      while ((index1 < cnst) && (this.BinVal[index1] != 1)) index1++
      binexpnt = bias - index1
      if (binexpnt >= this.MinExp)
      {
        index1++
      }
      else
      {
        binexpnt = this.MinExp - 1
        index1 = bias - binexpnt
      }
      lastbit = this.Size - 1 - index2 + index1
      if (this.BinVal[lastbit + 1] == 1)
      {
        rounded = 0
        if (this.BinVal[lastbit] == 1)
        {
          rounded = 1
        }
        else
        {
          index3 = lastbit + 2
          while ((rounded == 0) && (index3 < cnst))
          {
            rounded = this.BinVal[index3]
            index3++
          }
        }
                
        index3 = lastbit
        while ((rounded == 1) && (index3 >= 0))
        {
          if (this.BinVal[index3] == 0)
          {
            this.BinVal[index3] = 1
            rounded = 0
          }
          else
          {
            this.BinVal[index3] = 0
          }
          index3--
        }
      }
      index1 = index1 - 2
      if (index1 < 0) index1 = 0
    }

    while ((index1 < cnst) && (this.BinVal[index1] != 1)) index1++
    binexpnt2 = bias - index1
    if (outstring == "")
    {
      binexpnt = binexpnt2
      if ((binexpnt >= this.MinExp) && (binexpnt <= this.MaxExp))
      {
        index1++
      }
      else if (binexpnt < this.MinExp)
      {
        if (binexpnt2 == bias - cnst)
          this.StatCond = "normal"
        else if (binexpnt2 < this.MinUnnormExp)
          this.StatCond = "underflow"
        else
          this.StatCond = "denormalized"
        binexpnt = this.MinExp - 1
        index1 = bias - binexpnt
      }
    }
    else
    {
      binexpnt = power
      index1 = bias - binexpnt
      lastbit = this.Size - 1 - index2 + index1
      moreBits = this.BinVal[lastbit]
      index3 = lastbit + 1
      while ((moreBits == 0) && (index3 < cnst))
      {
        moreBits = this.BinVal[index3]
        index3++
      }
      this.BinVal[lastbit] = moreBits
    }
    while ((index2 < this.Size) && (index1 < cnst))
    {
      this.Result[index2] = this.BinVal[index1]
      index2++
      index1++
    }
    if ((binexpnt > this.MaxExp) || (outstring != ""))
    {
      binexpnt = this.MaxExp + 1
      if (outstring == "")
      {
        this.StatCond = "overflow"
        this.DispStr = "Infinity"
        if (this.Result[0] == 1)
          this.DispStr = "-" + this.DispStr

        if (this.Size == 32) index2 = 9
        else index2 = 12        
        while (index2 < this.Size)
        {
          this.Result[index2] = 0
          index2++
        }
      }
      else
      {
        this.StatCond = statstring
        this.DispStr = outstring
      }
    }
    if (this.Size == 32) index1 = 8
    else index1 = 11
    this.BinaryPower = binexpnt
    binexpnt += this.ExpBias
    while ((binexpnt / 2) != 0)
    {
      this.Result[index1] = binexpnt % 2
      if (binexpnt % 2 == 0) binexpnt = binexpnt / 2
        else binexpnt = binexpnt / 2 - 0.5
      index1 -= 1
    }
    output = ""
    for (index1 = 0; index1 < this.Size; index1++) 
      output = output + this.Result[index1]  
    return output
  }
}

function Hex2Bin(input)
{
  output = new String()
  numerals = new String()
  var index1, nibble, i, s, binexpnt, cnst, bias, index2, zeroFirst, zeroRest
  var binexpnt2, index3
  cnst = 2102
  bias = 1024
  numerals = "0123456789ABCDEF"

  for (index1 = 0; index1 < cnst; index1++)  this.BinVal[index1] = 0
  for (index1 = 0; index1 < this.Size; index1++)  this.Result[index1] = 0
  with (Math)
  {
    input = RemoveBlanks(input)
    if (input.length > (this.Size / 4))
    {
      alert("too many hex digits")
      output = "exit"
      return output
    }
    else if (input.length < (this.Size / 4))
    {
      alert("too few hex digits")
      output = "exit"
      return output
    }
    else
    {
      input = input.toUpperCase()
      for (index1 = 0; index1 < this.Size; index1 +=4)
      {
        nibble = numerals.indexOf(input.charAt(index1 / 4))
        if (nibble == -1)
        {
          alert("invalid hex digit")
          output = "exit"
          return output
        }
        temp = nibble / 16
        for (i = 0; i < 4; i++)
        {
          temp *= 2
          if (temp >= 1)
          {
            this.Result[index1 + i] = 1
            temp --
          }
          else
            this.Result[index1 + i] = 0
        }
      }
    }

    binexpnt = 0
    if (this.Size == 32) index2 = 9
    else index2 = 12
    for (index1 = 1; index1 < index2; index1++)
      binexpnt += parseInt(this.Result[index1])*pow(2, index2 - index1 - 1)
    binexpnt -= this.ExpBias
    this.BinaryPower = binexpnt
    index1 = bias - binexpnt
    if ((binexpnt >= this.MinExp) && (binexpnt <= this.MaxExp))
    {
      this.BinVal[index1] = 1
      index1++
    }
    index3 = index1
    if (this.Result[index2] == 0)
      zeroFirst = true
    this.BinVal[index1] = this.Result[index2]
    index2++
    index1++
    zeroRest = true
    while ((index2 < this.Size) && (index1 < cnst))
    {
      if (this.Result[index2] == 1)
        zeroRest = false
      this.BinVal[index1] = this.Result[index2]
      index2++
      index1++
    }
    while ((index3 < cnst) && (this.BinVal[index3] != 1)) index3++
    binexpnt2 = bias - index3
    if (binexpnt < this.MinExp)
    {
      if (binexpnt2 == bias - cnst)
        this.StatCond = "normal"
      else if (binexpnt2 < this.MinUnnormExp)
        this.StatCond = "underflow"
      else
        this.StatCond = "denormalized"
    }
    else if (binexpnt > this.MaxExp)
    {
      if (zeroFirst && zeroRest)
      {
        this.StatCond = "overflow"
        this.DispStr = "Infinity"
      }
      else if (!zeroFirst && zeroRest && (this.Result[0] == 1))
      {
        this.StatCond = "quiet"
        this.DispStr = "Indeterminate"
      }
      else if (!zeroFirst)
      {
        this.StatCond = "quiet"
        this.DispStr = "NaN"
      }
      else
      {
        this.StatCond = "signaling"
        this.DispStr = "NaN"
      }
      if ((this.Result[0] == 1) && (this.DispStr != "Indeterminate"))
        this.DispStr = "-" + this.DispStr
    }
    output = ""
    for (index1 = 0; index1 < this.Size; index1++)
      output = output + this.Result[index1]
    return output
  }
}

function RemoveBlanks(input)
{
  output = new String()
  var start, stop
  start = 0
  while ((input.charAt(start) == " ") && (start < input.length))
    start++
  stop = input.length - 1
  while ((input.charAt(stop) == " ") && (stop >= 0))
    stop--
  output = input.substring(start, stop + 1)
  return output
}

function Convert2Hex()
{
  output = new String()
  numerals = new String()
  var temp, index, i
  numerals = "0123456789ABCDEF"
  with (Math)
  {
    for (index = 0; index < this.Size; index +=4)
    {
      temp = 0
      for (i = 0; i < 4; i++)
        temp += pow(2, 3 - i)*this.Result[index + i]
      output = output + numerals.charAt(temp)
    }
  }
  return output
}

function numStrClipOff(input, precision)
{
  result = new String()
  numerals = new String()
  tempstr = new String()
  expstr = new String()
  signstr = new String()
  var locE, stop, expnum, locDP, start, MSD, MSDfound, index, expdelta, digits
  var number
  numerals = "0123456789";
  tempstr = input.toUpperCase()
  locE = tempstr.indexOf("E");
  if (locE != -1)
  {
    stop = locE
    expstr = input.substring(locE + 1, input.length)
    expnum = expstr * 1
  }
  else
  {
    stop = input.length
    expnum = 0
  }

  if (input.indexOf(".") == -1)
  {
    tempstr = input.substring(0, stop)
    tempstr += "."
    if (input.length != stop)
      tempstr += input.substring(locE, input.length)
    input = tempstr
    locE = locE + 1
    stop = stop + 1
  }

  locDP = input.indexOf(".");
  start = 0
  if (input.charAt(start) == "-")
  {
    start++
    signstr = "-"
  }
  else
    signstr = ""
  MSD = start
  MSDfound = false
  while ((MSD < stop) && !MSDfound)
  {
    index = 1
    while (index < numerals.length)
    {
      if (input.charAt(MSD) == numerals.charAt(index))
      {
        MSDfound = true
        break
      }
      index++
    }
    MSD++
  }
  MSD--

  if (MSDfound)
  {
    expdelta = locDP - MSD
    if (expdelta > 0)
      expdelta = expdelta - 1
    expnum = expnum + expdelta
    expstr = "e" + expnum
  }
  else
    MSD = start
  digits = stop - MSD
  tempstr = input.substring(MSD, stop)
  if (tempstr.indexOf(".") != -1)
    digits = digits - 1
  number = digits
  if (precision < digits)
    number = precision
  tempstr = input.substring(MSD, MSD + number + 1)
  if ( (MSD != start) || (tempstr.indexOf(".") == -1) )
  {
    result = signstr
    result += input.substring(MSD, MSD + 1)
    result += "."
    result += input.substring(MSD + 1, MSD + number)
    while (digits < precision)
    {
      result += "0"
      digits += 1
    }
    result += expstr
  }
  else
  {
    result = input.substring(0, start + number + 1)
    while (digits < precision)
    {
      result += "0"
      digits += 1
    }
    if (input.length != stop)
      result += input.substring(locE, input.length)
  }
  return result;
}

function numCutOff(input, precision)
{
  result = new String()
  tempstr = new String()
  var temp = input;
  if(temp < 1)
    temp += 1;
  tempstr = "" + temp;
  tempstr = numStrClipOff(tempstr, precision);
  if(temp == input)
    result = tempstr.substring(0, 1);
  else
    result = "0";
  result += tempstr.substring(1, tempstr.length);
  return result;
}

function Convert2Dec()
{
  output = new String()
  var s, i, dp, val, hid, temp, decValue, power
  with (Math)
  {
  if (this.Size == 32) s = 9
  else s = 12
  if ((this.BinaryPower < this.MinExp) || (this.BinaryPower > this.MaxExp))
  {
    dp = 0
    val = 0
  }
  else
  {
    dp = - 1
    val = 1
  }
  for (i = s; i < this.Size; i++)
    val += parseInt(this.Result[i])*pow(2, dp + s - i)
  decValue = val * pow(2, this.BinaryPower)
  this.FullDecValue = decValue
  if (this.Size == 32)
  {
    s = 8
    if (val > 0)
    {
      power = floor( log(decValue) / LN10 )
      decValue += 0.5 * pow(10, power - s + 1)
      val += 5E-8
    }
  }
  else s = 17
  if (this.Result[0] == 1)
  {
    decValue = - decValue
    this.FullDecValue = - this.FullDecValue
  }
  
  this.DecValue = "" + decValue
  if ((this.DecValue == "0") && (this.Result[0] == 1))
    this.DecValue = "-" + this.DecValue
  this.DecValue = numStrClipOff(this.DecValue, s)
  output = numCutOff(val, s)
  } 
  return output
}

function ieee (Size){

  this.Size = Size
  this.BinaryPower = 0
  this.DecValue = ""
  this.FullDecValue = 0
  this.DispStr = ""
  this.Convert2Bin = Convert2Bin
  this.Convert2Hex = Convert2Hex
  this.Convert2Dec = Convert2Dec
  this.Hex2Bin = Hex2Bin
  this.StatCond = "normal"
  this.BinString = ""
  this.BinVal = new Array(2102)
  if (Size == 32){
    this.ExpBias = 127
    this.MaxExp = 127
    this.MinExp = -126
    this.MinUnnormExp = -149
    this.Result = new Array(32)
  }
  else if (Size == 64){
    this.ExpBias = 1023
    this.MaxExp = 1023
    this.MinExp = -1022
    this.MinUnnormExp = -1074
    this.Result = new Array(64)
  }
}

function compute(obj, rounding){
  var index1, cnst
  ieee32 = new ieee(32)
  ieee32.BinString = ieee32.Hex2Bin(obj.hex32b.value)
  if (ieee32.BinString != "exit")
  {
    obj.bin32_0.value = ieee32.BinString.substring(0, 1)
    obj.bin32_1.value = ieee32.BinString.substring(1, 9)
    if ((ieee32.BinaryPower < ieee32.MinExp) ||
        (ieee32.BinaryPower > ieee32.MaxExp))
    {
      obj.bin32_9.value = "  "
      obj.bin32_9.value += ieee32.BinString.substring(9, 10)
      obj.bin32_9.value += "."
      obj.bin32_9.value += ieee32.BinString.substring(10, 32)
    }
    else
    {
      obj.bin32_9.value = "1 ."
      obj.bin32_9.value += ieee32.BinString.substring(9, 32)
    }
    obj.stat32.value = ieee32.StatCond
    obj.binpwr32.value = ieee32.BinaryPower
    obj.binpwr32f.value = ieee32.BinaryPower + ieee32.ExpBias
    obj.dec32sig.value = ieee32.Convert2Dec()
    if (ieee32.DispStr != "")
    {
      obj.entered.value = ieee32.DispStr
      obj.dec32.value = ieee32.DispStr
      obj.dec32sig.value = ""
    }
    else
    {
      obj.entered.value = ieee32.FullDecValue
      obj.dec32.value = ieee32.DecValue
    }
    obj.hex32.value = ieee32.Convert2Hex()
  }
}
</script>
             

            <form>
              Repr&eacute;sentation hexad&eacute;cimale (8 digits max): <input type="text" name="hex32b" size="8"><input
              type="reset" value="Effacer"><input type="button" value="Calculer" onclick=
              "compute(this.form, false)"><br>
              <br>
              <b><u>R&eacute;sultats:</u></b><br>
              <br>
              R&eacute;sultat en valeur r&eacute;elle <input type="text" name="entered" size="24"><br>
              <br>
              <u><b>Pr&eacute;cision de 32 bits dit 'single'</b></u>:<br>
              <br>
              <i>Binaire: Etat:</i> <input type="text" name="stat32" size="12"><br>
              <br>

              <table border="1" width="100%" cellspacing="0" cellpadding="2" bordercolor="#2764BE">
                <tr align="center">
                  <td bgcolor="#2764BE"><font color="#FFFFFF"><b>Bit 31</b></font></td>

                  <td bgcolor="#2764BE"><font color="#FFFFFF"><b>Bits 30 &agrave; 23</b></font></td>

                  <td bgcolor="#2764BE"><font color="#FFFFFF"><b>Bits 22 &agrave; 0</b></font></td>
                </tr>

                <tr align="center">
                  <td>Bit de signe<br>
                  <br>
                  <input type="text" name="bin32_0" size="1"><br>
                  <br>
                  0: +<br>
                  <br>
                  1: -</td>

                  <td>Bits d'exposant<br>
                  <br>
                  <input type="text" name="bin32_1" size="8"><br>
                  <br>
                  Valeur d&eacute;cimale de la cha&icirc;ne de bits et exposant<br>
                  <br>
                  <input type="text" name="binpwr32f" size="3"> - 127 = <input type="text" name="binpwr32"
                  size="4"> </td>

                  <td>Mantisse<br>
                  <br>
                  <input type="text" name="bin32_9" size="26"><br>
                  <br>
                  Valeur d&eacute;cimale de la mantisse<br>
                  <br>
                  <input type="text" name="dec32sig" size="9"> </td>
                </tr>
              </table>
              <br>
              <b>Hexad&eacute;cimal:</b> <input type="text" name="hex32" size="8"> <b>d&eacute;cimal:</b>
              <input type="text" name="dec32" size="14">
            </form>
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td class="title"><a name="_topic_8"></a>Bibliographie</td>
      </tr>

      <tr>
        <td><br>
        </td>
      </tr>

      <tr>
        <td>
          <div style="text-align:justify;">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
            <a href="http://www.cs.berkeley.edu/~dbindel/class/cs279/dsb-bib.pdf">Un grand nombre de
            r&eacute;f&eacute;rences d&eacute;cortiqu&eacute;es et analys&eacute;es <b>par David
            Bindel</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/fparith.html">L'Arithm&eacute;tique sur les
            nombres &agrave; virgule flottante <b>par Nelson H. F. Beebe</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/intarith.html">L'Arithm&eacute;tique des
            intervales <b>par Nelson H. F. Beebe</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Les fonctions
            &eacute;l&eacute;mentaires <b>par Nelson H. F. Beebe</b></a><br>
            <a href="http://docs.sun.com/htmlcoll/coll.648.2/iso-8859-1/NUMCOMPGD/ncg_goldberg.html">What
            Every Computer Scientist Should Know about Floating-Point Arithmetic <b>par David Goldberg &amp;
            Doug Priest</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Underflow and the Reliability
            of Numerical Software <b>par James Demmel</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Faster Numerical Algorithms
            via Exception Handling, IEEE Transactions on Computers <b>par Xiaoye Li and James
            Demmel</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Handling Floating-Point
            Exceptions in Numeric Programs, ACM Transactions on Programming Languages and Systems <b>par John
            Hauser</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Number-Theoretic Test
            Generation for Directed Rounding, IEEE Transactions on Computers <b>par Michael Parks</b></a><br>
            <a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html">Algorithms for Arbitrary
            Precision Floating Point Arithmetic, Proceedings of the 10th IEEE Symposium on Computer
            Arithmetic <b>par Douglas Priest</b></a><br>
          </div>
        </td>
      </tr>

      <tr>
        <td><br>
        <br>
        </td>
      </tr>

      <tr>
        <td>
          <p align="center">[ <a href="cours2.htm">Pr&eacute;c&eacute;dent</a> | <a href=
          "index.htm">Index</a> | Suivant ]</p>
        </td>
      </tr>

      <tr>
        <td align="center"><font color="#9999FF" size="-3"><br>
        <br>
         par Erik LOUISE<br>
        <a href="mailto:ricostar@wanadoo.fr">ricostar@wanadoo.fr</a><br>
        <a href="http://www.ricostar.fr.st/">http://www.ricostar.fr.st/</a><br>
         Derni&egrave;re mise &agrave; jour: 
<script type="text/javascript" language="javascript">
                  document.writeln(document.lastModified.substring(0, 10))
                
</script>
        </font></td>
      </tr>
    </table>
  </body>
</html>


