<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<author><name>Erik LOUISE</name><email>ricostar@wanadoo.fr</email><web-site>http://www.ricostar.fr.st/</web-site></author><page name="INDEX"><title>Norme IEEE 754 32 bits</title><keywords>IEEE 754, mantisse, exposant, signe, binaire, hexadécimal, hexa, float, flottant, réel, nombre</keywords><description>Comment convertir un hexadécimal IEEE 754 31 bits en nombre réel</description><links><link type="prev">E:\Documents\Cours Progworld\systemesnum\cours2.htm</link><link type="index">E:\Documents\Cours Progworld\systemesnum\index.htm</link><link type="next"></link></links><introduction>&lt;u&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;/u&gt;&lt;br&gt;&lt;br&gt;
L'IEEE 754 est aujourd'hui la représentation la plus commune en terme de calculs en virgule flottante en informatique. La majeure partie des architectures et plateformes actuelles telles l'x86 ou macintosh en sont directement inspirées. Cet article va vous donner un bref aperçu de la manière dont se décompose, dans un premier temps un HEXA IEEE754 32 bits en binaire, puis dans un second temps, comment interpréter la séquence binaire obtenue en un nombre réel.
&lt;br&gt;&lt;br&gt;Cette norme a été établie par &lt;a href="http://www.cs.berkeley.edu/~wkahan/"&gt;William Kahan&lt;a&gt; pour le compte de l'IEEE (Institute of Electrical and Electronics Engineers) en 1985.


</introduction></page><section name="Nombres à virgule flottante, kesako?" title="Nombres à virgule flottante, kesako ?"><paragraph name="préface">Il y a plusieurs manières de représenter des nombres réels sur des ordinateurs. Une approche d'un nombre en réel serait de recomposer ce dernier par le placement d'un point encerclé de deux integers, mais par définition, cette virgule-là ne serait en aucun cas flottante, de plus cette méthode pourrait nous amener à commettre de grosses erreurs par l'accumulation d'arrondis plus ou moins approximatifs.
Finalement, la nécessité d'établir un format permettant l'utilisation d'une virgule réellement flottante se fit sentir, il fallut alors déterminer ce dernier de la manière la plus simple à interpréter aussi bien en code machine (en binaire, le cas échéant) qu'en réel pour que nous pauvres hommes aux capacitées calculatoires limitées puissions comprendre la valeur à définir. &lt;br&gt;Dans cette optique-là, un format se distingua plus que les autres, il s'agit du format Hexadécimal qui permet une interprétation rapide dans les deux sens. Nous allons donc voir de quelle manière on peut retranscrire un code hexadécimal sur 4 octets (32 bits) en réel sans pour autant négliger la partie machine avec le code binaire ...

</paragraph></section><section name="Organisation d'un hexadécimal 32 bits IEEE 754" title="Organisation d'un hexadécimal 32 bits IEEE 754"><paragraph name="transcription">&lt;br&gt;Tout au long de ce cours, nous allons prendre comme exemple la chaîne hexa &amp;h42F6CCCD.
</paragraph><image name="hex2bin.gif"><link type="img">E:\Documents\Cours Progworld\Rico\images\hex2bin.gif</link><legend>Conversion Hexa vers Binaire.</legend></image><note title="Astuce" img="http://www.programmationworld.com/site/images/advice.gif" name="hex2bin">Pour convertir une base 16 (hexa) en base 2 (binaire) facilement, il existe une méthode simple : un octet (8 bits) est composé de deux caractères en hexadécimal, et de 8 caractères en binaire. On numérote les bits de droite à gauche, ainsi pour un caractère ascii (de 0 a F) représentant un hexa, on interprète de la manière suivante : le premier représentant une valeur de '1', le second une valeur de '2', le troisième une valeur de '4' et pour finir le quatrième, une valeur de '8'. &lt;br&gt; Notez bien le rythme de succession des 1 et 0 dans le tableau suivant :</note><image name="bits.gif"><link type="img">E:\Documents\Cours Progworld\Rico\images\bits.gif</link><legend>Tableau de conversion Hexadécimal vers Binaire.</legend></image><paragraph name="commentaire">Bon, maintenant que tout le monde sait décomposer le binaire résultant d'un hexadécimal, attaquons les choses serieuses ;)</paragraph></section><section name="Le signe" title="Le signe"><paragraph name="signe">Là, vu qu'il n'y a pas grand chose à dire, on va faire simple ;o) &lt;br&gt;&lt;br&gt; Le signe de notre nombre réel s'obtient simplement par l'interprétation du tout premier bit (celui de gauche) de la chaîne binaire obtenue, si le bit 31 est égal a 0 alors le signe est positif (+), si il est égal a 1, alors le signe est négatif (-).</paragraph></section><section name="L'Exposant" title="L'Exposant"><paragraph name="exposant">La série de bits obtenue (1 octet) doit être représentative aussi bien d'un exposant positif que d'un exposant négatif. Ainsi pour pouvoir représenter une pleine échelle, il est nécessaire de traduire l'octet obtenu en entier puis d'y soustraire '127', ceci uniquement dans le cas d'un IEEE 754 32 bits dit 'single'.&lt;br&gt; dans notre exemple, la conversion s'effectue ainsi :</paragraph><image name="exposant.gif"><link type="img">E:\Documents\Cours Progworld\Rico\images\exposant.gif</link><legend>Calcul de l'esposant.</legend></image></section><section name="La mantisse" title="La mantisse"><paragraph name="mantisse 1">C'est là que les choses se compliquent un peu ;o) &lt;br&gt; 
Afin d'interpréter cette dernière partie, vous devez 'normaliser' la mantisse, c'est-à-dire séparer la partie entière de la partie réelle, car elles ne s'interprètent pas de la même facon.&lt;br&gt;Pour se faire, nous allons utiliser l'exposant&lt;br&gt;&lt;br&gt;
&lt;b&gt;&lt;u&gt;La partie entière de la mantisse&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
La partie entière s'obtient par la décomposition de la mantisse sous forme binaire à l'aide de l'exposant, ainsi pour un exposant de '6', nous allons extraire les 6 premiers bits en partant de la gauche. Attention toutefois, la normalisation ne s'arrête pas là, vous devez maintenant placer un '1' devant les 6 chiffres obtenus, puis rajouter le nombre de 0 nécessaire devant pour obtenir un nombre de bits égal selon le cas à 2, 4, 8, 12, 16, 20 ou 24.&lt;br&gt;
la normalisation effectuée, vous pouvez alors convertir le nombre binaire obtenu en un entier qui sera finalement la partie entière de votre réel.</paragraph><image name="mantisse1.gif"><link type="img">E:\Documents\Cours Progworld\Rico\images\mantisse1.gif</link><legend>Partie entière de la mantisse.</legend></image><paragraph name="mantisse 2">&lt;br&gt;
&lt;b&gt;&lt;u&gt;La partie réelle de la mantisse&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
La partie réelle s'obtient par l'addition pure et dure du 'poids' des bits. La méthode reste relativement simple dans le sens où l'on donne une valeur de 1/2 au premier bit, 1/4 au second, 1/8 au troisième, et ainsi de suite jusqu'à la fin de la chaîne binaire et on additionne le tout. :)</paragraph><image name="mantisse2.gif"><link type="img">E:\Documents\Cours Progworld\Rico\images\mantisse2.gif</link><legend>Partie réelle de la mantisse.</legend></image><note title="Remarque" img="http://www.programmationworld.com/site/images/rmq.gif" name="note">Dans le cadre de l'explication, nous avons décomposé et traduit tous les digits de la mantisse, mais dans une application à but d'affichage ou de gain de temps, vous pouvez (et c'est fortement recommandé) ne conserver que les 5 ou 6 premiers digits de la partie réelle de la mantisse, les bits de poids fort se trouvant à l'extrémité gauche de la mantisse, leur importance diminue exponentiellement vers la droite.&lt;br&gt; Attention toutefois de ne pas tronquer la partie réelle ! cela vous amènerait de grosses erreurs d'interprétation et de calcul...</note></section><section name="VG" title="Recomposition du nombre &amp; conclusion"><paragraph name="conclusion">Et voila, nous avons maintenant tous les éléments pour recomposer notre nombre à virgule flottante depuis un hexadécimal, et nous obtenons bien &lt;b&gt;&lt;u&gt;'+123.4'&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;
L'application de cette technique est très couramment utilisée dans les processeurs, et autres puces électroniques, pour ceux d'entre vous qui se sont souvent posé la question de savoir comment un automate ou un ordinateur (diverses plateformes) est capable de convertir une valeur hexa en binaire ou en réel, c'est simplement parce que la technique que nous venons d'aborder est supportée matériellement parlant, cela dit vous pourrez trouver sur le net de nombreuses ressources concernant ce domaine, notamment sur &lt;a href="http://www.ieee.org"&gt;le site officiel de IEEE&lt;/a&gt;</paragraph></section><section name="Calculatrice JavaScript" title="Calculatrice en JavaScript"><paragraph name="Calculatrice javascript">&lt;SCRIPT&gt;
function Convert2Bin(outstring, statstring, signBit, power, rounding)
{
  output = new String()
  var binexpnt, index1, index2, cnst, bias, lastbit, rounded, index3, binexpnt2
  var moreBits
  cnst = 2102
  bias = 1024
  for (index1 = 0; index1 &lt; this.Size; index1++)  this.Result[index1] = 0     
  with (Math) 					
  {
    this.Result[0] = signBit
    index1 = 0
    if (this.Size == 32) index2 = 9
    else index2 = 12
    if (rounding &amp;&amp; (outstring == ""))
    {
      while ((index1 &lt; cnst) &amp;&amp; (this.BinVal[index1] != 1)) index1++
      binexpnt = bias - index1
      if (binexpnt &gt;= this.MinExp)
      {
        index1++
      }
      else
      {
        binexpnt = this.MinExp - 1
        index1 = bias - binexpnt
      }
      lastbit = this.Size - 1 - index2 + index1
      if (this.BinVal[lastbit + 1] == 1)
      {
        rounded = 0
        if (this.BinVal[lastbit] == 1)
        {
          rounded = 1
        }
        else
        {
          index3 = lastbit + 2
          while ((rounded == 0) &amp;&amp; (index3 &lt; cnst))
          {
            rounded = this.BinVal[index3]
            index3++
          }
        }
                
        index3 = lastbit
        while ((rounded == 1) &amp;&amp; (index3 &gt;= 0))
        {
          if (this.BinVal[index3] == 0)
          {
            this.BinVal[index3] = 1
            rounded = 0
          }
          else
          {
            this.BinVal[index3] = 0
          }
          index3--
        }
      }
      index1 = index1 - 2
      if (index1 &lt; 0) index1 = 0
    }

    while ((index1 &lt; cnst) &amp;&amp; (this.BinVal[index1] != 1)) index1++
    binexpnt2 = bias - index1
    if (outstring == "")
    {
      binexpnt = binexpnt2
      if ((binexpnt &gt;= this.MinExp) &amp;&amp; (binexpnt &lt;= this.MaxExp))
      {
        index1++
      }
      else if (binexpnt &lt; this.MinExp)
      {
        if (binexpnt2 == bias - cnst)
          this.StatCond = "normal"
        else if (binexpnt2 &lt; this.MinUnnormExp)
          this.StatCond = "underflow"
        else
          this.StatCond = "denormalized"
        binexpnt = this.MinExp - 1
        index1 = bias - binexpnt
      }
    }
    else
    {
      binexpnt = power
      index1 = bias - binexpnt
      lastbit = this.Size - 1 - index2 + index1
      moreBits = this.BinVal[lastbit]
      index3 = lastbit + 1
      while ((moreBits == 0) &amp;&amp; (index3 &lt; cnst))
      {
        moreBits = this.BinVal[index3]
        index3++
      }
      this.BinVal[lastbit] = moreBits
    }
    while ((index2 &lt; this.Size) &amp;&amp; (index1 &lt; cnst))
    {
      this.Result[index2] = this.BinVal[index1]
      index2++
      index1++
    }
    if ((binexpnt &gt; this.MaxExp) || (outstring != ""))
    {
      binexpnt = this.MaxExp + 1
      if (outstring == "")
      {
        this.StatCond = "overflow"
        this.DispStr = "Infinity"
        if (this.Result[0] == 1)
          this.DispStr = "-" + this.DispStr

        if (this.Size == 32) index2 = 9
        else index2 = 12        
        while (index2 &lt; this.Size)
        {
          this.Result[index2] = 0
          index2++
        }
      }
      else
      {
        this.StatCond = statstring
        this.DispStr = outstring
      }
    }
    if (this.Size == 32) index1 = 8
    else index1 = 11
    this.BinaryPower = binexpnt
    binexpnt += this.ExpBias
    while ((binexpnt / 2) != 0)
    {
      this.Result[index1] = binexpnt % 2
      if (binexpnt % 2 == 0) binexpnt = binexpnt / 2
        else binexpnt = binexpnt / 2 - 0.5
      index1 -= 1
    }
    output = ""
    for (index1 = 0; index1 &lt; this.Size; index1++) 
      output = output + this.Result[index1]  
    return output
  }
}

function Hex2Bin(input)
{
  output = new String()
  numerals = new String()
  var index1, nibble, i, s, binexpnt, cnst, bias, index2, zeroFirst, zeroRest
  var binexpnt2, index3
  cnst = 2102
  bias = 1024
  numerals = "0123456789ABCDEF"

  for (index1 = 0; index1 &lt; cnst; index1++)  this.BinVal[index1] = 0
  for (index1 = 0; index1 &lt; this.Size; index1++)  this.Result[index1] = 0
  with (Math)
  {
    input = RemoveBlanks(input)
    if (input.length &gt; (this.Size / 4))
    {
      alert("too many hex digits")
      output = "exit"
      return output
    }
    else if (input.length &lt; (this.Size / 4))
    {
      alert("too few hex digits")
      output = "exit"
      return output
    }
    else
    {
      input = input.toUpperCase()
      for (index1 = 0; index1 &lt; this.Size; index1 +=4)
      {
        nibble = numerals.indexOf(input.charAt(index1 / 4))
        if (nibble == -1)
        {
          alert("invalid hex digit")
          output = "exit"
          return output
        }
        temp = nibble / 16
        for (i = 0; i &lt; 4; i++)
        {
          temp *= 2
          if (temp &gt;= 1)
          {
            this.Result[index1 + i] = 1
            temp --
          }
          else
            this.Result[index1 + i] = 0
        }
      }
    }

    binexpnt = 0
    if (this.Size == 32) index2 = 9
    else index2 = 12
    for (index1 = 1; index1 &lt; index2; index1++)
      binexpnt += parseInt(this.Result[index1])*pow(2, index2 - index1 - 1)
    binexpnt -= this.ExpBias
    this.BinaryPower = binexpnt
    index1 = bias - binexpnt
    if ((binexpnt &gt;= this.MinExp) &amp;&amp; (binexpnt &lt;= this.MaxExp))
    {
      this.BinVal[index1] = 1
      index1++
    }
    index3 = index1
    if (this.Result[index2] == 0)
      zeroFirst = true
    this.BinVal[index1] = this.Result[index2]
    index2++
    index1++
    zeroRest = true
    while ((index2 &lt; this.Size) &amp;&amp; (index1 &lt; cnst))
    {
      if (this.Result[index2] == 1)
        zeroRest = false
      this.BinVal[index1] = this.Result[index2]
      index2++
      index1++
    }
    while ((index3 &lt; cnst) &amp;&amp; (this.BinVal[index3] != 1)) index3++
    binexpnt2 = bias - index3
    if (binexpnt &lt; this.MinExp)
    {
      if (binexpnt2 == bias - cnst)
        this.StatCond = "normal"
      else if (binexpnt2 &lt; this.MinUnnormExp)
        this.StatCond = "underflow"
      else
        this.StatCond = "denormalized"
    }
    else if (binexpnt &gt; this.MaxExp)
    {
      if (zeroFirst &amp;&amp; zeroRest)
      {
        this.StatCond = "overflow"
        this.DispStr = "Infinity"
      }
      else if (!zeroFirst &amp;&amp; zeroRest &amp;&amp; (this.Result[0] == 1))
      {
        this.StatCond = "quiet"
        this.DispStr = "Indeterminate"
      }
      else if (!zeroFirst)
      {
        this.StatCond = "quiet"
        this.DispStr = "NaN"
      }
      else
      {
        this.StatCond = "signaling"
        this.DispStr = "NaN"
      }
      if ((this.Result[0] == 1) &amp;&amp; (this.DispStr != "Indeterminate"))
        this.DispStr = "-" + this.DispStr
    }
    output = ""
    for (index1 = 0; index1 &lt; this.Size; index1++)
      output = output + this.Result[index1]
    return output
  }
}

function RemoveBlanks(input)
{
  output = new String()
  var start, stop
  start = 0
  while ((input.charAt(start) == " ") &amp;&amp; (start &lt; input.length))
    start++
  stop = input.length - 1
  while ((input.charAt(stop) == " ") &amp;&amp; (stop &gt;= 0))
    stop--
  output = input.substring(start, stop + 1)
  return output
}

function Convert2Hex()
{
  output = new String()
  numerals = new String()
  var temp, index, i
  numerals = "0123456789ABCDEF"
  with (Math)
  {
    for (index = 0; index &lt; this.Size; index +=4)
    {
      temp = 0
      for (i = 0; i &lt; 4; i++)
        temp += pow(2, 3 - i)*this.Result[index + i]
      output = output + numerals.charAt(temp)
    }
  }
  return output
}

function numStrClipOff(input, precision)
{
  result = new String()
  numerals = new String()
  tempstr = new String()
  expstr = new String()
  signstr = new String()
  var locE, stop, expnum, locDP, start, MSD, MSDfound, index, expdelta, digits
  var number
  numerals = "0123456789";
  tempstr = input.toUpperCase()
  locE = tempstr.indexOf("E");
  if (locE != -1)
  {
    stop = locE
    expstr = input.substring(locE + 1, input.length)
    expnum = expstr * 1
  }
  else
  {
    stop = input.length
    expnum = 0
  }

  if (input.indexOf(".") == -1)
  {
    tempstr = input.substring(0, stop)
    tempstr += "."
    if (input.length != stop)
      tempstr += input.substring(locE, input.length)
    input = tempstr
    locE = locE + 1
    stop = stop + 1
  }

  locDP = input.indexOf(".");
  start = 0
  if (input.charAt(start) == "-")
  {
    start++
    signstr = "-"
  }
  else
    signstr = ""
  MSD = start
  MSDfound = false
  while ((MSD &lt; stop) &amp;&amp; !MSDfound)
  {
    index = 1
    while (index &lt; numerals.length)
    {
      if (input.charAt(MSD) == numerals.charAt(index))
      {
        MSDfound = true
        break
      }
      index++
    }
    MSD++
  }
  MSD--

  if (MSDfound)
  {
    expdelta = locDP - MSD
    if (expdelta &gt; 0)
      expdelta = expdelta - 1
    expnum = expnum + expdelta
    expstr = "e" + expnum
  }
  else
    MSD = start
  digits = stop - MSD
  tempstr = input.substring(MSD, stop)
  if (tempstr.indexOf(".") != -1)
    digits = digits - 1
  number = digits
  if (precision &lt; digits)
    number = precision
  tempstr = input.substring(MSD, MSD + number + 1)
  if ( (MSD != start) || (tempstr.indexOf(".") == -1) )
  {
    result = signstr
    result += input.substring(MSD, MSD + 1)
    result += "."
    result += input.substring(MSD + 1, MSD + number)
    while (digits &lt; precision)
    {
      result += "0"
      digits += 1
    }
    result += expstr
  }
  else
  {
    result = input.substring(0, start + number + 1)
    while (digits &lt; precision)
    {
      result += "0"
      digits += 1
    }
    if (input.length != stop)
      result += input.substring(locE, input.length)
  }
  return result;
}

function numCutOff(input, precision)
{
  result = new String()
  tempstr = new String()
  var temp = input;
  if(temp &lt; 1)
    temp += 1;
  tempstr = "" + temp;
  tempstr = numStrClipOff(tempstr, precision);
  if(temp == input)
    result = tempstr.substring(0, 1);
  else
    result = "0";
  result += tempstr.substring(1, tempstr.length);
  return result;
}

function Convert2Dec()
{
  output = new String()
  var s, i, dp, val, hid, temp, decValue, power
  with (Math)
  {
  if (this.Size == 32) s = 9
  else s = 12
  if ((this.BinaryPower &lt; this.MinExp) || (this.BinaryPower &gt; this.MaxExp))
  {
    dp = 0
    val = 0
  }
  else
  {
    dp = - 1
    val = 1
  }
  for (i = s; i &lt; this.Size; i++)
    val += parseInt(this.Result[i])*pow(2, dp + s - i)
  decValue = val * pow(2, this.BinaryPower)
  this.FullDecValue = decValue
  if (this.Size == 32)
  {
    s = 8
    if (val &gt; 0)
    {
      power = floor( log(decValue) / LN10 )
      decValue += 0.5 * pow(10, power - s + 1)
      val += 5E-8
    }
  }
  else s = 17
  if (this.Result[0] == 1)
  {
    decValue = - decValue
    this.FullDecValue = - this.FullDecValue
  }
  
  this.DecValue = "" + decValue
  if ((this.DecValue == "0") &amp;&amp; (this.Result[0] == 1))
    this.DecValue = "-" + this.DecValue
  this.DecValue = numStrClipOff(this.DecValue, s)
  output = numCutOff(val, s)
  } 
  return output
}

function ieee (Size){

  this.Size = Size
  this.BinaryPower = 0
  this.DecValue = ""
  this.FullDecValue = 0
  this.DispStr = ""
  this.Convert2Bin = Convert2Bin
  this.Convert2Hex = Convert2Hex
  this.Convert2Dec = Convert2Dec
  this.Hex2Bin = Hex2Bin
  this.StatCond = "normal"
  this.BinString = ""
  this.BinVal = new Array(2102)
  if (Size == 32){
    this.ExpBias = 127
    this.MaxExp = 127
    this.MinExp = -126
    this.MinUnnormExp = -149
    this.Result = new Array(32)
  }
  else if (Size == 64){
    this.ExpBias = 1023
    this.MaxExp = 1023
    this.MinExp = -1022
    this.MinUnnormExp = -1074
    this.Result = new Array(64)
  }
}

function compute(obj, rounding){
  var index1, cnst
  ieee32 = new ieee(32)
  ieee32.BinString = ieee32.Hex2Bin(obj.hex32b.value)
  if (ieee32.BinString != "exit")
  {
    obj.bin32_0.value = ieee32.BinString.substring(0, 1)
    obj.bin32_1.value = ieee32.BinString.substring(1, 9)
    if ((ieee32.BinaryPower &lt; ieee32.MinExp) ||
        (ieee32.BinaryPower &gt; ieee32.MaxExp))
    {
      obj.bin32_9.value = "  "
      obj.bin32_9.value += ieee32.BinString.substring(9, 10)
      obj.bin32_9.value += "."
      obj.bin32_9.value += ieee32.BinString.substring(10, 32)
    }
    else
    {
      obj.bin32_9.value = "1 ."
      obj.bin32_9.value += ieee32.BinString.substring(9, 32)
    }
    obj.stat32.value = ieee32.StatCond
    obj.binpwr32.value = ieee32.BinaryPower
    obj.binpwr32f.value = ieee32.BinaryPower + ieee32.ExpBias
    obj.dec32sig.value = ieee32.Convert2Dec()
    if (ieee32.DispStr != "")
    {
      obj.entered.value = ieee32.DispStr
      obj.dec32.value = ieee32.DispStr
      obj.dec32sig.value = ""
    }
    else
    {
      obj.entered.value = ieee32.FullDecValue
      obj.dec32.value = ieee32.DecValue
    }
    obj.hex32.value = ieee32.Convert2Hex()
  }
}
&lt;/SCRIPT&gt;
&lt;form&gt;
Représentation hexadécimale (8 digits max) : &lt;input type="text" name="hex32b" size=8&gt;&lt;input type=reset value="Effacer"&gt;&lt;input type="button" value="Calculer" onClick="compute(this.form, false)"&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;&lt;u&gt;Résultats:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;
Résultat en valeur réelle &lt;input type="text" name="entered" size=24&gt;
&lt;br&gt;&lt;br&gt;
&lt;u&gt;&lt;b&gt;Précision de 32 bits dit 'single'&lt;/b&gt;&lt;/u&gt;:
&lt;br&gt;&lt;br&gt;
&lt;i&gt;Binaire: Etat: &lt;/i&gt;&lt;input type="text" name="stat32" size=12&gt;
&lt;br&gt;&lt;br&gt;
&lt;table border="1" width="100%" cellspacing="0" cellpadding="2" bordercolor="#2764BE"&gt;&lt;tr align="center"&gt;&lt;td bgcolor="#2764BE"&gt;&lt;font color="#FFFFFF"&gt;&lt;b&gt;Bit 31&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td bgcolor="#2764BE"&gt;&lt;font color="#FFFFFF"&gt;&lt;b&gt;Bits 30 à 23&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td bgcolor="#2764BE"&gt;&lt;font color="#FFFFFF"&gt;&lt;b&gt;Bits 22 à 0&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align="center"&gt;&lt;td&gt;
Bit de signe&lt;br&gt;
&lt;br&gt;&lt;input type="text" name="bin32_0" size="1"&gt;&lt;br&gt;&lt;br&gt;0: +&lt;br&gt;&lt;br&gt;1: -
&lt;/td&gt;&lt;td&gt;
Bits d'exposant&lt;br&gt;&lt;br&gt;&lt;input type="text" name="bin32_1" size="8"&gt;&lt;br&gt;&lt;br&gt;Valeur décimale de la chaîne de bits et exposant&lt;br&gt;&lt;br&gt;&lt;input type="text" name="binpwr32f" size="3"&gt;  - 127 = &lt;input type="text" name="binpwr32" size="4"&gt;
&lt;/td&gt;&lt;td&gt;
Mantisse&lt;br&gt;&lt;br&gt;&lt;input type="text" name="bin32_9" size="26"&gt;&lt;br&gt;&lt;br&gt;Valeur décimale de la mantisse&lt;br&gt;&lt;br&gt;&lt;input type="text" name="dec32sig" size="9"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
&lt;b&gt;Hexadécimal: &lt;/b&gt;&lt;input type="text" name="hex32" size=8&gt;
&lt;b&gt;décimal: &lt;/b&gt;&lt;input type="text" name="dec32" size=14&gt;
&lt;/form&gt;
</paragraph></section><section name="Bibliographie" title="Bibliographie"><paragraph name="liens">&lt;br&gt;
&lt;a href="http://www.cs.berkeley.edu/~dbindel/class/cs279/dsb-bib.pdf"&gt;Un grand nombre de références décortiquées et analysées &lt;b&gt;par David Bindel&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/fparith.html"&gt;L'Arithmétique sur les nombres à virgule flottante &lt;b&gt;par Nelson H. F. Beebe&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/intarith.html"&gt;L'Arithmétique des intervales &lt;b&gt;par Nelson H. F. Beebe&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Les fonctions élémentaires &lt;b&gt;par Nelson H. F. Beebe&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://docs.sun.com/htmlcoll/coll.648.2/iso-8859-1/NUMCOMPGD/ncg_goldberg.html"&gt;What Every Computer Scientist Should Know about Floating-Point Arithmetic &lt;b&gt;par David Goldberg &amp; Doug Priest&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Underflow and the Reliability of Numerical Software &lt;b&gt;par James Demmel&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Faster Numerical Algorithms via Exception Handling, IEEE Transactions on Computers &lt;b&gt;par Xiaoye Li and James Demmel&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Handling Floating-Point Exceptions in Numeric Programs, ACM Transactions on Programming Languages and Systems &lt;b&gt;par John Hauser&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Number-Theoretic Test Generation for Directed Rounding, IEEE Transactions on Computers &lt;b&gt;par Michael Parks&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://liinwww.ira.uka.de/bibliography/Math/elefunt.html"&gt;Algorithms for Arbitrary Precision Floating Point Arithmetic, Proceedings of the 10th IEEE Symposium on Computer Arithmetic &lt;b&gt;par Douglas Priest&lt;/b&gt;&lt;/a&gt;&lt;br&gt;</paragraph></section></document>
