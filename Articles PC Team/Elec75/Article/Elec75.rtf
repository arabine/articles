{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1036\deflangfe1036{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f32\froman\fcharset238\fprq2 Times New Roman CE;}{\f33\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f35\froman\fcharset161\fprq2 Times New Roman Greek;}{\f36\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f37\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f38\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f39\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\fmodern\fcharset238\fprq1 Courier New CE;}
{\f49\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f51\fmodern\fcharset161\fprq1 Courier New Greek;}{\f52\fmodern\fcharset162\fprq1 Courier New Tur;}{\f53\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f54\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f55\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \snext15 Standard;}{\*\cs16 \additive \sbasedon10 hmtexte;}{\s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \sbasedon0 \snext17 
Plain Text;}}{\info{\title (((Magazine : PC Team 71)))}{\author Belegar}{\operator Belegar}{\creatim\yr2001\mo7\dy16\hr23\min33}{\revtim\yr2001\mo11\dy10\hr21\min15}{\version266}{\edmins3580}{\nofpages3}{\nofwords1156}{\nofchars6317}
{\*\company (c) Dwarf Corp.}{\nofcharsws7485}{\vern8283}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1417 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1417\dgvorigin1417\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale117\viewzk2\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20\lang1031\langfe1036\langnp1031 (((Magazine : PC Team 75)))
\par }{\fs20 (((Rubrique : Team Pratik)))
\par (((Sous Rubrique : \'e9lectronique)))
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((titre))) TeamBot (3) \endash  L'environnement de d\'e9veloppement pour PIC16F84
\par 
\par (((chapo)))
\par Ce mois-ci, nous allons boucler notre cha\'eene de d\'e9veloppement en installant un compilateur C et son simulateur. Nous terminerons par la programmation d'un exemple simple pour se familiariser avec nos nouveaux outils de travail.
\par 
\par (((texte)))
\par Durant quelques num\'e9ros, nous mettrons en \'9cuvre un microcontr\'f4leur, le c\'e9l\'e8bre 16F84 de la famille des PIC de Microchip. Ce composant est extr\'eamement populaire et, partant, les outils et autes montages l'utilisant sont l\'e9
gions. Nous utiliserons une des derni\'e8res version de ce composant, le 16F84A qui autorise une fr\'e9quence d'horloge jusqu'\'e0 20MHz, soit une puissance de 5MIPS. Les caract\'e9ristiques de ce processeur sont all\'e9
chantes : seulement 35 instructions assembleur, architecture RISC (instructions en un seul cycle), 1024 mots de programme dans de la m\'e9moire FLASH, 68 octets de RAM et 64 octets d'EEPROM pour sauvegarder des donn\'e9es. C\'f4t\'e9 p\'e9riph\'e9
riques, nous avons \'e0 notre disposition un timer 8-bit, 13 entr\'e9es/sorties bidirectionnelles, un watchdog\'85 le tout dans un petit boitier 18 broches ! Le datasheet sur le CD fournira bien d'autres pr\'e9cisions et sera notre manuel de r\'e9f\'e9
rence durant notre d\'e9veloppement. Les premi\'e8res pages \'e0 regarder sont les plans m\'e9moires et la structure interne du PIC. Les sch\'e9mas ci-contre montrent deux zones m\'e9moires distincts. La premi\'e8re est d\'e9di\'e9e \'e0
 l'enregistrement du programme, les 1024 mots en m\'e9moire FLASH. La deuxi\'e8me zone contient le SFR (Special Fonction Register) pour param\'e9trer les p\'e9riph\'e9riques et la RAM pour stocker les variables. 
Un conseil, imprimez toutes les pages descriptives sur le SFR.
\par }\pard\plain \ql \li0\ri0\widctlpar\tx-1980\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs20 (((inter))) Installation et param\'e9trage
\par Tout d'abord, il faut se munir de deux logiciels. D'une part, l'environnement et l'assembleur totalement gratuit de Microchip, \'e0 savoir MPLAB. Celui-ci est t\'e9l\'e9chargeable sur le site du constructeur (www.microchip.com) et bien s\'fb
r disponible su le CD Pro. A cela, vient s'ajouter le compilateur C de Hi-Tech Software (www.htsoft.com), lui aussi \'e9galement gratuit pour un usage personnel et non commercial. Vous le trouverez sur le site du constructeur et encore une fois \'e9
galement sur le CD Pro, toujours pr\'e9sent pour vous \'e9viter des t\'e9l\'e9chargements. Installer proprement ces deux logiciels dans deux r\'e9pertoires distincts, en \'e9vitant d'utiliser des noms de r\'e9
pertoire du plus de 8 lettres pour garder la compatibilit\'e9 entre les logiciels. Red\'e9marrer l'ordinateur, puis lancer MPLAB pour le configurer en suivant scrupuleusement les \'e9
tapes suivantes. En premier lieu, aller dans le menu "Project" puis "Install Language Tool\'85", et choisir l'outil HI-TECH PICL. Pour le compilateur et le linker, sp\'e9cifier le chemin de picl.exe, et pour l'
assembleur choisir aspic.exe. Aller ensuite dans le menu "Project" et cliquer sur "New Project". Remplir les champs "Target Filename" et "Include Path" par les \'e9l\'e9ments qui conviennent, par exemple : "pcteam.hex" et " c:\\piclite\\include". V\'e9
rifier que la cible vis\'e9e est bien le processeur 16F84A, cliquer sur "Node Properties" et mettre le champs \'e0 "PIC-C Lite Linker". Enfin, la derni\'e8re \'e9tape consiste \'e0 ajouter un nouveau n\'9c
ud, le fichier source de votre projet, soit "pcteam.c" dans notre exemple. N'oubliez pas de sp\'e9cifier dans "Node Properties" qu'il faut faire appel au compilateur. Voil\'e0 votre environnement compl\'e8tement configur\'e9, libre \'e0 vous de s\'e9
parer votre projets en plusieurs sources, en mixant le code C et assembleur par exemple. Derni\'e8re chose, ne pas oublier de sp\'e9cifier le mode de d\'e9veloppement en "MPLAB SIM 16F84A" afin de b\'e9n\'e9ficier du tr\'e8s pratique outil de simulation !

\par 
\par (((inter))) Sch\'e9ma et tests
\par Il est courant dans le monde des microcontr\'f4leurs de commencer par un montage simple, \'e0 l'instar du fameux "Hello world !". La coutume veut que l'on fasse clignoter une LED branch\'e9
e sur un port. Cela nous permettra de faire le tour de toute la cha\'eene de d\'e9veloppement. Commen\'e7ons par monter le sch\'e9ma \'e9lectrique pr\'e9sent\'e9
 ci-contre. Le 16F84 a besoin d'un minimum de composants pour pouvoir fonctionner. Le quartz, accompagn\'e9 de ses condensateurs, fournit l'horloge de cadencement. Il y a l'in\'e9vitable alimentation de +5V issue d'un r\'e9gulateur de type 78
05 par exemple. Enfin, la broche de remise \'e0 z\'e9ro (MCLR) est mise au 5V pour \'e9viter de relancer le programme. Bien s\'fbr, la LED n'est utile ici que pour notre application. Une fois le sch\'e9ma termin\'e9, lancer MPLAB et, apr\'e8
s avoir suivi la configuration pr\'e9c\'e9dente, recopier le code source suivant dans un fichier source avec l'extension .c.
\par 
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20\lang2057\langfe1036\langnp2057 (((listing)))
\par #define EVER ;;
\par #include <pic1684.h>
\par }{\fs20 unsigned char Compteur;
\par 
\par void main(void)\{
\par   Compteur = 0;    
\par   TRISB=0xFE;
\par   }{\fs20\lang2057\langfe1036\langnp2057 RB0 = 0;
\par   OPTION = 0x7;
\par   INTCON = 0x20;
\par   TMR0 = 0;  
\par   GIE=1;
\par   for(EVER)\{
\par   \}
\par \}
\par 
\par void interrupt Timer_Overflow(void)\{
\par   char i;    
\par   if(T0IF)\{
\par     }{\fs20 T0IF=0;
\par     Compteur++;
\par     if(Compteur==38)\{
\par     Compteur = 0;
\par     }{\fs20\lang2057\langfe1036\langnp2057 i = RB0;
\par     RB0 = ~i;
\par     TMR0 = 0;
\par     }{\fs20 \}
\par   \}
\par \}
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 
\par (((texte)))
\par Ne vous inqui\'e9tez pas si vous ne comprenez pas tout, nous aurons le temps de voir certaines parties plus en d\'e9tails durant les prochains mois. Ce m\'eame code source existe en version comment\'e9e sur le CD. Le programme est constitu\'e9
e de deux fonctions, une principale (main) et la deuxi\'e8me (Timer_Overflow) invoqu\'e9e lors d'une interruption interne. La fonction principale contient une boucle infinie, qui se charge de faire changer l'\'e9
tat de la LED toutes les 0,5 secondes. En fait, nous avons cr\'e9\'e9 une fonction "perte de temps" similaire au Delay() existante en C sur PC. Une fois le code source recopi\'e9, appuyer
 sur F10 pour invoquer le compilateur, puis le linker. Si tout c'est bien pass\'e9, ce dernier a du g\'e9n\'e9rer un fichier hexad\'e9cimal au format Intel portant l'extension .hex. C'est en quelque sorte "l'ex\'e9cutable" que nous allons placer dans la m
\'e9moire FLASH du 16F84.
\par 
\par (((inter))) Programmation du PIC
\par Voici la derni\'e8re \'e9tape. Placer le 16F84 sur le programmateur que nous avons r\'e9alis\'e9 le mois dernier. Ensuite; installer le logiciel IcProg disponible sur le CD Pro. Configurer les divers param\'e8
tres : le programmateur se nomme JDM, choisissez le bon port s\'e9rie (COM1 ou COM2 g\'e9n\'e9ralement) et le bon composant (16F84A). La capture d'\'e9cran ci-contre montre les autres param\'e8tres \'e0 r\'e9gler. Ouvrir le fichier hexad\'e9cimal g\'e9n
\'e9r\'e9 par MPLAB puis lancer la programmation et la v\'e9rification. Lorsque tout est fini et est valid\'e9, \'f4ter le composant du programmateur pour le placer sur le circuit de test. Alimenter le montage et la LED devrait clignoter au rythme tr\'e8
s pr\'e9cis de la seconde. Bravo, vous avez r\'e9alis\'e9 votre premier d\'e9veloppement sur PIC16F84 !
\par 
\par (((inter))) Le mois prochain
\par Il reste encore beaucoup \'e0 dire sur MPLAB et le 16F84. Il existe quelques ouvrages de r\'e9f\'e9rences dans le commerce mais Internet vous fournira encore plus de renseign
ements et qui plus est, gratuitement. N'oubliez pas de consulter le CD Pro qui contient tous les fichiers li\'e9s \'e0 cet article. Au cours du prochain num\'e9ro, nous appliquerons nos connaissances en concevant une carte de commande pour moteur \'e0
 courant continu. Et en prime, vous trouverez les premi\'e8res photos de TeamBot.
\par 
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((signature)))
\par Anthony Rabine - arabine@programmationworld.com
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((images)))
\par elec1.tif : Le plan m\'e9moire de la partie programme.
\par elec2.tif : Le plan m\'e9moire du SFR et de la RAM.
\par elec3.tif : MPLAB est un fabuleux outil de d\'e9veloppement.
\par elec4.tif : Nous voyons que le code est bon gr\'e2ce \'e0 la simulation temps r\'e9el.
\par elec5.tif : Ce PIC-atchu ne lancera que des \'e9clairs inoffensifs !
\par elec6.tif : Et encore une programmation parfaitement r\'e9ussie.
\par }}