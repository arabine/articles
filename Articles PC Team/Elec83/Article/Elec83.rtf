{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1036\deflangfe1036{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Thorndale};}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f34\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Thorndale};}{\f35\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Thorndale};}{\f37\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Thorndale};}
{\f38\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Thorndale};}{\f39\froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Thorndale};}{\f40\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Thorndale};}
{\f41\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Thorndale};}{\f42\fswiss\fcharset238\fprq2 Arial CE;}{\f43\fswiss\fcharset204\fprq2 Arial Cyr;}{\f45\fswiss\fcharset161\fprq2 Arial Greek;}{\f46\fswiss\fcharset162\fprq2 Arial Tur;}
{\f47\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f48\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f49\fswiss\fcharset186\fprq2 Arial Baltic;}{\f50\fmodern\fcharset238\fprq1 Courier New CE;}{\f51\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f53\fmodern\fcharset161\fprq1 Courier New Greek;}{\f54\fmodern\fcharset162\fprq1 Courier New Tur;}{\f55\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f56\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f57\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe255\cgrid\langnp1036\langfenp255 \snext15 Standard;}{
\s16\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \i\f2\fs20\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \sbasedon0 \snext16 Plain Text;}{\*\cs17 \additive \f1\ul\cf0 \sbasedon10 Hyperlink;}}{\*\listtable{\list\listtemplateid1729262492\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\leveltemplateid67895297\'01\u-3913 ?;}{\levelnumbers;}\loch\af3\hich\af3\dbch\af0\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67895299\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67895301\'01\u-3929 ?;}{\levelnumbers
;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67895297
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67895299\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\leveltemplateid67895301\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid67895297\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67895299\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67895301\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }{\listname ;}\listid505290879}}{\*\listoverridetable
{\listoverride\listid505290879\listoverridecount0\ls1}}{\info{\author Belegar}{\operator Belegar}{\creatim\yr2002\mo6\dy17\min45}{\revtim\yr2002\mo8\dy2\hr16\min24}{\version83}{\edmins2837}{\nofpages3}{\nofwords1400}{\nofchars7143}{\*\company Dwarf Corp.}
{\nofcharsws9804}{\vern8269}}\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134 \deftab1250\widowctrl\ftnbj\aenddoc\hyphhotz425\makebackup\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120
\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale148\viewzk2\nolnhtadjtbl \fet0\sectd \sbknone\linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((Magazine: PC Team 83)))
\par (((Rubrique : Team Pratik)))
\par }\pard\plain \s16\ql \li0\ri0\nowidctlpar\aspalpha\faauto\rin0\lin0\itap0 \i\f2\fs20\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\i0\f0 (((Sous Rubrique : \'e9lectronique)))
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((titre))) R\'e9cepteur infrarouge (1/2)
\par 
\par (((chapo)))
\par Nous vous avions pr\'e9sent\'e9 il y a plus d'un an un petit module r\'e9cepteur infrarouge. Le fonctionnement de celui-ci \'e9tait malheureusement cach\'e9, mais nous poss\'e9dons maintenant les connaissances suffisantes pour d\'e9velopper notre version 

\par de A \'e0 Z.
\par 
\par (((texte)))
\par L'\'e9lectronique parait souvent magique lorsque l'on ne comprend pas son fonctionnement. Ce sentiment est d'autant plus marqu\'e9 avec les syst\'e8mes \'e0 base de microcontr\'f4
leurs. Ces petits processeurs sont programmables et leur code source est souvent la cl\'e9 du syst\'e8me. Nous allons essayer de d\'e9mystifier cela en tentant de d\'e9velopper par nous m\'eame une application qui existe d\'e9j\'e0
 mais dont le code source est non accessible. C'est ce que l'on nomme le reverse engineering : \'e0 partir de tests et d'observations seulement (le code source n'est pas accessible) il faut reproduire le m\'eame fonctionnement. Notre cas est un peu sp\'e9
cial car il est possible de r\'e9cup\'e9rer le code objet du logiciel embarqu\'e9 puis de le d\'e9sassembler pour r\'e9cup\'e9rer un code lisible. N\'e9anmoins, nous nous int\'e9resserons surtout aux techniques employ\'e9
es sans oublier tout ce que l'on apprendra techniquement, sur l'infrarouge par exemple. Ce mois-ci, nous allons pr\'e9senter l'application et programmer le port s\'e9rie. Le mois prochain sera consacr\'e9 \'e0 l'infrarouge proprement dit. Le module r\'e9
cepteur infrarouge se pr\'e9sente sous la forme d'un petit circuit \'e9lectronique se branchant sur le port s\'e9rie du PC. Il poss\'e8de un microcontr\'f4leur entour\'e9 de quelques composants classiques et du r\'e9cepteur infrarouge.
 Ce module est sensible \'e0 toute source infrarouge en provenance des t\'e9l\'e9commandes du commerce, celle d'une t\'e9l\'e9vision, d'un magn\'e9toscope ou d'une cha\'eene Hi-Fi, sous r\'e9serve qu'elles soient compatibles
 avec le protocole RC5. L'information fournie par une t\'e9l\'e9commande se verra alors envoy\'e9e au PC via le port s\'e9rie, sous la forme d'une s\'e9rie d'octets.
\par  
\par (((inter))) Protocole RS232 
\par Notre module va communiquer avec le PC via le port s\'e9rie et le protocole RS232. T\'f4t ou tard, nous devrons bien d\'e9velopper ce protocole et le mieux est de le d\'e9velopper en premier. En effet, cela permettra de tester facilement le d\'e9
codage du signal RC5. Le c\'9cur du module est un microcontr\'f4leur de la famille PIC, le 16F84A, dans sa version \'e0 20MHz. Notez qu'avec quelques modifications, le code source fonctionnera sans probl\'e8
me sur un autre processeur comme le 12C509. (plus petit et beaucoup moins cher) Tout d'abord, nous allons proc\'e9der \'e0 un petit rappel sur le protocole RS232. Ce protocole transmet les informations en s\'e9
rie, donc sur un seul fil plus la masse pour la r\'e9f\'e9rence de tension. Pour effectuer un dialogue dans les deux sens, il faut rajouter un troisi\'e8me fil. Ainsi, un fil sera consacr\'e9 \'e0 l'\'e9mission de donn\'e9es et l'autre \'e0 la r\'e9
ception. Au niveau des niveaux de tension, un '1' logique sera repr\'e9sent\'e9 par un \endash 12V et un '0' logique par un +12V. Ce niveau de tension a l'avantage de r\'e9sister assez bien aux perturbations \'e9lectriques. Au repos, c'est \'e0
 dire lorsque aucune donn\'e9e n'est v\'e9hicul\'e9e, le fil est au niveau '1'. Les donn\'e9es sont transmises sur le fil de fa\'e7on asynchrone, ce qui signifie qu'il n'y a aucune horloge transmise pour rythmer le d\'e9bit des \'e9changes. Un bit \'e9
chang\'e9 dure un temps bit, c'est \'e0 dire une p\'e9riode de l'horloge de synchronisation. Si cette horloge est fix\'e9e \'e0 1KHz, alors le d\'e9bit sera de 1000 bits/seconde, soit 1000 bauds. (1 baud = 1 bit/seconde dans notre cas) Vu que le d\'e9
bit est fixe, les deux c\'f4t\'e9s (l'\'e9metteur et le r\'e9cepteur) doivent poss\'e9der une horloge de m\'eame fr\'e9quence. La trame, visible sur le sch\'e9ma ci-contre, est constitu\'e9e d'un bit de start, signe du d\'e9but de l'\'e9mission de donn
\'e9es, de 5 \'e0 8 bits de donn\'e9es (bit de poids faible en premier), d'un bit de parit\'e9 (optionnel) et enfin un, un et demi ou deux bits de stop. Cette trame est envoy\'e9e par l'\'e9l\'e9ment \'e9metteur. Le r\'e9cepteur quant \'e0 lui proc\'e8
de de la fa\'e7on suivante : il surveille la ligne de transmission et recherche un front descendant. D\'e8s que ce front est d\'e9tect\'e9 (c'est le bit de start), la logique de r\'e9ception r\'e9
alise un retard de un demi-temps bit. On se trouve alors au milieu du bit de start. En \'e9chantillonnant alors huit fois de un temps bit \'e0 chaque fois, on est capable de lire le niveau de tous les bits de donn\'e9es. Charge \'e0 la logique de v\'e9
rifier la pr\'e9sence du bit de stop. L'ordinateur est \'e9quip\'e9 d'un composant proche du 68901, un UART (Universal Synchronous Asynchronous Receiver Transmitter) qui s'occupe de tout le d\'e9codage de la trame, dans le sens r\'e9ception et \'e9
mission. Il poss\'e8de \'e9galement tous les bons registres de fa\'e7on \'e0 pouvoir param\'e9trer compl\'e8tement la forme de la transmission : nombre de bits de donn\'e9es, vitesse en bauds, nombre de bits de stop et type de parit\'e9.
\par 
\par (((inter))) Spy Game
\par Amusons nous maintenant \'e0 observer la communication qui existe entre le r\'e9cepteur et le PC. Pour cela, nous allons utiliser un programme appel\'e9 "snifer" qui va nous afficher les donn\'e9es v\'e9hicul\'e9es par le port s\'e9
rie. Les utilisateurs de Windows 9x ou Dos peuvent utiliser Serial Watcher disponible sur le CD-Pro, il fonctionne parfaitement bien. Pour les autres, nous allons en fabriquer une version en Visual basic. Elle \'e9voluera peu \'e0 peu afin d'int\'e9g
rer de nouvelles possibilit\'e9s. Notons qu'il est possible de programmer ce petit logiciel dans tout autre langage, sous r\'e9serve de ne pas acc\'e9der aux ports d'entr\'e9es sorties directement car les syst\'e8
mes NT ne l'autorisent pas. Sous Linux, il faut disposer des droits du Root. Nous allons utiliser le contr\'f4le MSComm qui fournit une gestion haut niveau du port s\'e9rie. Pour utiliser cette fonctionnalit\'e9, il est n\'e9
cessaire de l'ajouter au projet en acc\'e9dant au menu "Projet" puis "Composants". Ce programme aura pour but d'initialiser le port s\'e9rie et le module r\'e9cepteur (voir l'encart) puis lire en permanence le port s\'e9rie et d'afficher la donn\'e9
e qui s'y trouve. La capture d'\'e9cran ci-contre montre notre programme en pleine action. Nous voyons la r\'e9ponse "OK" qui montre que le module a \'e9t\'e9 convenablement initialis\'e9. Chaque ligne suivante correspond \'e0 une touche unique d'une t
\'e9l\'e9commande, le code d'identification pouvant varier d'une t\'e9l\'e9commande \'e0 l'autre. Notre programme est au point, abordons maintenant la programmation du microcontr\'f4leur.
\par 
\par (((inter))) \'c9mulation du RS232
\par Notre module s'appuiera sur un microcontr\'f4leur de type 16F84 que nous avons eu l'opportunit\'e9 de d\'e9couvrir durant les pr\'e9c\'e9dents num\'e9ros.. Ce type de microcontr\'f4leur bon march\'e9 n'est pas \'e9quip\'e9 de port s\'e9
rie compatible RS232. Qu'\'e0 cela ne tienne, nous allons l'\'e9muler par logiciel. Pour \'e9viter d'\'eatre trop compliqu\'e9, nous allons limiter ses performances en fixant sa configuration \'e0 celle indiqu\'e9 en encart. Il faut g\'e9n\'e9
rer une communication \'e0 9600 bauds, soit 9600Hz. Le temps bit sera donc de 104\'b5s. Comme nous l'avons dit pr\'e9c\'e9demment, nous allons en fait cr\'e9er une routine d'attente d'une dur\'e9e moiti\'e9 du temps bit, soit 52\'b5
s. La boucle d'attente se mat\'e9rialisera par une simple variable que l'on d\'e9comptera. La valeur initiale de cette variable est \'e0 choisir en proc\'e9dant \'e0 des simulations avec MPLAB, l'environnement de d\'e9veloppement pour notre microcontr\'f4
leur. La seconde routine \'e0 d\'e9velopper est la fonction d'envoi d'un caract\'e8re. Le listing de cette fonction est fournit ci-contre. Le caract\'e8re \'e0 envoyer est pass\'e9 en param\'e8tre \'e0
 travers la variable TXBUF. Chaque bit de cette variable est extrait, en commen\'e7ant par le bit de poids faible, puis est envoy\'e9 sur la ligne RxD du port s\'e9rie de l'ordinateur. Chaque DELAY dure exactement 52\'b5s afin de respecter le temps bit 
\'e0 9600 bauds.
\par 
\par (((listing)))
\par PUTCHAR:
\par \tab movlw\tab 0x08
\par \tab movwf\tab Cmpt
\par \tab bsf\tab TX\tab ; start bit
\par putc1:\tab 
\par \tab call\tab DELAY\tab ; temps bit
\par \tab call\tab DELAY\tab 
\par \tab rrf\tab TXBUF,1
\par \tab btfsc\tab STATUS,0
\par \tab goto\tab Un
\par Zero:
\par \tab bsf\tab TX
\par \tab goto Suite
\par Un:
\par \tab bcf\tab TX
\par Suite:
\par \tab decfsz\tab Cmpt,1
\par \tab goto\tab putc1
\par \tab call\tab DELAY
\par \tab call\tab DELAY
\par \tab bcf\tab TX\tab ; stop bit
\par \tab call\tab DELAY
\par \tab call\tab DELAY
\par \tab return
\par 
\par (((texte)))
\par Au final, nous poss\'e9dons une \'e9mulation compl\'e8te du port s\'e9rie. Le code source complet ainsi que diverses ressources se situent sur le CD Pro. Le mois prochain, nous verrons comment implanter le d\'e9codage du protocole RC5 ce qui mettra fin 
\'e0 la fabrication de notre module.
\par 
\par (((signature)))
\par Anthony Rabine - arabine@programmationworld.com
\par 
\par (((images)))
\par elec1.tif : Notre syst\'e8me repose sur un principe simple et performant.
\par elec2.tif : Le microcontr\'f4leur communique avec l'ordinateur via le protocole RS232.
\par elec3.tif : La trame compl\'e8te du protocole RS232.
\par elec4.tif : Quelques lignes de code suffisent pour communiquer avec le module infrarouge.
\par 
\par (((encart)))
\par (((titre))) Param\'e8tres du r\'e9cepteur
\par Voici le r\'e9sum\'e9 des param\'e8tres du r\'e9cepteur infrarouge : 9600 bauds, pas de parit\'e9, 1 bit de stop et pas de contr\'f4le de flux. L'alimentation se fait par les broches RTS et DTR (12V). Pour l'initialiser : envoyer "IR" et attendre la r\'e9
ponse "OK". (caract\'e8res ASCII en majuscules)
\par 
\par }}