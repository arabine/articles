{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1036\deflangfe1036{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f32\froman\fcharset238\fprq2 Times New Roman CE;}{\f33\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f35\froman\fcharset161\fprq2 Times New Roman Greek;}{\f36\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f37\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f38\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f39\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f40\fswiss\fcharset238\fprq2 Arial CE;}{\f41\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f43\fswiss\fcharset161\fprq2 Arial Greek;}{\f44\fswiss\fcharset162\fprq2 Arial Tur;}{\f45\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f46\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f47\fswiss\fcharset186\fprq2 Arial Baltic;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \snext0 
Normal;}{\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\faauto\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang1036\langfe1036\kerning32\cgrid\langnp1036\langfenp1036 \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 \snext15 Standard;}}{\info{\title (((Magazine : PCteam 63)))}{\author Gimli}{\operator Gimli}{\creatim\yr2000\mo10\dy26\min12}
{\revtim\yr2000\mo10\dy26\hr8\min12}{\version4}{\edmins4}{\nofpages2}{\nofwords1324}{\nofchars6923}{\*\company The Dwarf Company}{\nofcharsws0}{\vern8249}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1417 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale90\viewzk2\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((Magazine : PCteam 64)))
\par (((Rubrique: Team pratik)))
\par (((Sous Rubrique: \'e9lectronique)))
\par 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {(((titre))) Gestion d'un \'e9cran LCD
\par 
\par }\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1036\langfe1036\cgrid\langnp1036\langfenp1036 {\fs20 (((chapo)))
\par Le mois dernier \'e9tait consacr\'e9 \'e0 la d\'e9couverte du port parall\'e8le. Ce mois-ci, nous allons utiliser nos connaissances en mettant en \'9cuvre un \'e9cran LCD, que l'on trouve aujourd'hui un peu partout dans les appareils \'e9lectroniques.

\par 
\par (((texte)))
\par R\'e9aliser l'interface d'un \'e9cran LCD est une exp\'e9rience tr\'e8s int\'e9ressante. Ses possibilit\'e9s d'utilisation sont importantes car les afficheurs envahissent litt\'e9ralement notre quotidien. L'\'e9cran \'e9tudi\'e9 ici est du type alphanum
\'e9rique (\'e9criture de chiffres, de lettres et de signes) et est compl\'e8tement standard. Il poss\'e8de un g\'e9n\'e9rateur de caract\'e8res, un contr\'f4leur int\'e9gr\'e9 et est capable d'afficher 2 lignes de 16 caract\'e8res. Enfin, gr\'e2ce \'e0
 la pr\'e9sence d'une LED derri\'e8re l'\'e9cran, l'afficheur est dot\'e9 d'un r\'e9tro \'e9clairage du plus bel effet. Un tel \'e9cran co\'fbte aux alentours de 100 F, le prix variant selon le nombre de lignes, la pr\'e9sence d'un r\'e9tro \'e9
clairage et le syst\'e8me de transmission (s\'e9rie ou parall\'e8le). V\'e9rifier seulement que le contr\'f4leur est compatible avec le HD44780 de Hitashi, dont la documentation compl\'e8te est fournie sur le CD Pro.
\par 
\par (((inter))) Principe de fonctionnement
\par Compte tenu de l'\'e9tendue du sujet, un r\'e9sum\'e9 des principaux param\'e8tres se trouve dans le fichier lcd.pdf situ\'e9 sur le CD du magazine. Le fonctionnement est relativement simple car la plus grande partie du travail est laiss\'e9e au contr\'f4
leur d'\'e9cran. En dehors de l'alimentation, seuls deux signaux de contr\'f4le et huit bits de donn\'e9es sont n\'e9cessaires pour faire fonctionner notre \'e9cran. 
\par Le bus de donn\'e9es bidirectionnel va nous servir principalement \'e0 envoyer des param\'e8tres et des caract\'e8res vers l'\'e9cran. Les caract\'e8res \'e0 \'e9crire sont cod\'e9s en ASCII, donc sur 8 bits. Le bit de contr\'f4le E joue le r\'f4
le d'horloge : la donn\'e9e est effective sur un front descendant. Le bit RS sert quant \'e0 lui \'e0 indiquer au contr\'f4leur que l'information pr\'e9sente sur le bus de donn\'e9es est une instruction (RS \'e0 0) ou un caract\'e8re (RS \'e0 1). L'entr
\'e9e de configuration R/_W permet de configurer l'\'e9cran en \'e9criture (R/_W \'e0 0) ou en lecture (R/_W \'e0 1) ; pour simplifier notre montage, nous connecterons directement cette broche \'e0 la masse car seule l'\'e9criture nous int\'e9
ressera. Il est \'e9galement possible de faire varier le contraste en modifiant la tension de V0. 
\par En ce qui concerne le hardware, l'\'e9cran est constitu\'e9 d'un contr\'f4leur qui se charge d'allumer ou d'\'e9teindre les cellules correspondantes. Chaque caract\'e8re est form\'e9 \'e0
 l'aide d'une matrice de 5*8 cellules. Le plus souvent, seules les 7 lignes sup\'e9rieures de la matrice servent, la derni\'e8re \'e9tant r\'e9serv\'e9e \'e0 la visualisation d'un curseur. Il y a deux types de m\'e9moires inclues dans l'\'e9
cran : la CG RAM (Character Generator) qui contient des caract\'e8res (dont des signes japonais) et la DD RAM qui contient l'adresse courante du curseur.
\par 
\par (((image : elec1.tif : Le protocole de communication.)))
\par 
\par (((inter))) Mise en \'9cuvre
\par Le sch\'e9ma ci-contre montre un exemple d'interfa\'e7age sur le port parall\'e8le. Le bus de donn\'e9es du port ne fonctionne ici qu'en sortie : il est donc reli\'e9 directement \'e0 celui de l'\'e9cran (qui est bien s\'fbr compatible TTL). Cert
ains ports parall\'e8les poss\'e8dent des broches de sortie en collecteur ouvert ; il peut \'eatre alors utile d'ajouter une r\'e9sistance de tirage au +5V de 10K Ohms sur les lignes E et RS. Le contraste et la luminosit\'e9 du r\'e9tro \'e9clairage se r
\'e8glent \'e0 l'aide de deux potentiom\'e8tres. Veillez \'e0 interconnecter toutes les masses et \'e0 relier l'ensemble \'e0 la masse du port parall\'e8le situ\'e9e sur les broches 18 \'e0 25. L'alimentation du circuit est laiss\'e9e \'e0
 un classique 7805 dont il convient de c\'e2bler comme indiqu\'e9 sur le sch\'e9ma ci-contre. Ce composant se charge de transformer une tension comprise entre 7 \'e0 15V en un 5V continu capable de d\'e9biter une intensit\'e9 relativement importante.

\par 
\par (((image : elec2.tif : Le branchement classique d'un 7805.)))
\par 
\par En effet, le port parall\'e8le est incapable de fournir le courant n\'e9cessaire au fonctionnement de l'\'e9cran. Celui-ci consomme 100mA environ, ajout\'e9 au r\'e9tro \'e9clairage (optionnel) qui absorbe au bas mot 300mA, cela fait au total pr\'e8
s de 0,5 A ! Le 7805 est toujours accompagn\'e9 d'une s\'e9rie de condensateurs servant de r\'e9serves d'\'e9nergie, c'est un montage que nous utiliserons tr\'e8s souvent dans cette rubrique. Enfin, il est tr\'e8s facile d'impl\'e9menter ce sch\'e9
ma sur une plaquette \'e0 bandes cuivr\'e9es que l'on peut trouver ais\'e9ment aux alentours de 20F. Pour la liaison entre l'\'e9cran et le PC, il faut \'e9viter d'utiliser un c\'e2ble parall\'e8
le de plus de 3m : dans certains cas, il peut y avoir des erreurs de transmission.
\par 
\par (((inter))) Programmation de l'\'e9cran
\par L'\'e9cran ainsi branch\'e9 ne sert pas \'e0 grand chose sans un minimum de programmation. Nous allons faire appel une fois de plus au C et au Visual Basic accompagn\'e9 de sa dll}{\fs20\cf6  }{\fs20 inpout.dll, permettant de g\'e9rer le port parall\'e8
le dans ce langage. La programmation en C se r\'e9v\'e8le d'ailleurs un peu plus ais\'e9e car toutes les routines de base sont incluses en standard. Tous les programmes sont comme \'e0 l'accoutum\'e9e fournis sur le CD Pro et accompagn\'e9
s de leurs sources comment\'e9es.
\par Comme nous l'avons vu pr\'e9c\'e9demment, la communication avec l'afficheur ob\'e9it \'e0 un protocole assez simple. La meilleure mani\'e8re de programmer un tel projet est de cr\'e9er plusieurs proc\'e9dures : 
\par - Init_LCD () : cette fonction se chargera d'initialiser l'\'e9cran (bus de 4 ou 8 bits, configuration du curseur, etc.)
\par - Efface_LCD () : son nom est assez explicite, l'\'e9cran est effac\'e9 et le curseur revient au d\'e9but de la premi\'e8re ligne.
\par - Ecrire_LCD (Chaine, Position) : cette fonction \'e9crit sur l'\'e9cran la phrase pass\'e9e en param\'e8tre \'e0 l'emplacement d\'e9sir\'e9.
\par Pour ceux qui programment en C, il suffit d'inclure le fichier d'en-t\'eate LCD.h \'e0 un projet pour b\'e9n\'e9ficier des proc\'e9dures. Le dialogue le plus simple est l'\'e9criture d'un caract\'e8re \'e0 l'\'e9
cran : il suffit de traduire en programmation les chronogrammes du protocole de communication. Voici par exemple l'algorithme qui \'e9crit le caract\'e8re 'A' :
\par 
\par (((listing)))
\par proc\'e9dure Ecrire_Caract\'e8re(A)
\par \{
\par \tab RS=1;  // l'octet envoy\'e9 est un caract\'e8re
\par \tab outportb (0x378, 65);  // on place la valeur ASCII de A sur le bus de donn\'e9es
\par \tab E=1;  // E \'e0 5V pour pr\'e9parer un front descendant
\par \tab delai(2 ms); // d\'e9lai de 2 millisecondes
\par \tab E=0;  // on baisse E \'e0 0V : le caract\'e8re est inscrit sur l'\'e9cran
\par }\pard \s15\ql \fi708\li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 {\fs20 delai(2 ms);
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 {\fs20 \}
\par 
\par (((texte)))
\par Dans le cas de l'envoi d'une instruction, l'algorithme reste exactement le m\'eame sauf pour les d\'e9lais qui doivent \'eatre un peu plus important. Les d\'e9lais sont utilis\'e9s pour \'e9viter de "planter" l'\'e9cran. Lorsque celui-ci re\'e7
oit une instruction, comme effacer l'\'e9cran par exemple, le contr\'f4leur met un certain temps pour ex\'e9cuter l'ordre et est alors indisponible durant cette p\'e9riode. La documentation technique nous fournit heureusement tous ces temps d'ex\'e9
cution ; les sources fournies sur le CD sont donc \'e0 adapter au contr\'f4leur utilis\'e9. Notons cependant qu'il existe une solution plus fiable mais l\'e9g\'e8rement plus compliqu\'e9e : en commutant l'\'e9cran en lecture, il est possible de voir si l'
\'e9cran est occup\'e9 gr\'e2ce \'e0 l'\'e9tat du bit BF (Busy Flag). Enfin, n'oublions pas qu'il est n\'e9cessaire d'initialiser l'\'e9cran avant toute tentative d'\'e9criture. L'initialisation consiste \'e0 configurer l'\'e9cran selon le mat\'e9
riel disponible et ses pr\'e9f\'e9rences : nombre de lignes d'affichage, mode de communication, pr\'e9sence du curseur, etc.
\par  
\par (((inter))) Conclusion
\par Une fois que l'on a bien compris le principe de fonctionnement, il devient facile d'\'e9tendre les possibilit\'e9s de notre syst\'e8me. Il est possible par exemple de connecter la borne Read/_Write au port parall\'e8le pour pouvoir lire la m\'e9
moire et utiliser le signal "Busy Flag". Il est \'e9galement envisageable d'utiliser les possibilit\'e9s de cr\'e9ation de caract\'e8res et, partant, cr\'e9er les signes propres au fran\'e7ais (les \'e9, \'e0, \'e8
 etc.). Les applications sont nombreuses, n'h\'e9sitez donc pas \'e0 nous envoyer vos r\'e9alisations pour les faire figurer sur le CD Pro !
\par 
\par (((signature)))
\par Anthony Rabine - arabine@programmationworld.com
\par 
\par (((images)))
\par elec3.tif : Le c\'e2blage entre l'\'e9cran et le port parall\'e8le.
\par elec4.tif : Un rappel de brochages.
\par elec5.tif : L'\'e9cran que nous utilisons et son connecteur.
\par 
\par 
\par }}